1- step is to add the folders that will contain the application components required for an MVC application: Entities, MODELS, CONTROLLERS, and VIEWS

2- Configuring the Application : The Startup class is responsible for configuring the ASP.NET Core application
*The ConfigureServices method is used to set up shared objects that can be used throughout the application through the dependency injection feature
* The Configure method is used to set up the features that receive and process HTTP requests. Each method that I call 
  in the Configure method is an extension method that sets up an HTTP request processor
	  public class Startup {
	public void ConfigureServices(IServiceCollection services) {
	services.AddMvc();
	}
	public void Configure(IApplicationBuilder app, IHostingEnvironment env) {
	app.UseDeveloperExceptionPage();
	app.UseStatusCodePages();
	app.UseStaticFiles();
	app.UseMvc(routes => {
	});

3- need to prepare the application for Razor views. Right-click the Views folder, select Add ➤ New Item from the pop-up menu, and select the MVC View Imports Page item from the ASP.NET category
  @using SportsStore.Models  The @using statement will allow me to use the types in the SportsStore.Models namespace in views without needing to refer to the namespace. The
  @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

4- Starting the Domain Model : All projects start with the domain model, which is the heart of an MVC application. Since this is an e-commerce application, the most obvious model I need is 
for a product. I added a class file called "type the entityname".cs to the Models folder and used it to define the class shown in Listing

5- Creating a Repository : need some way of getting Product objects from a database. added a new C# interface file called IProductRepository.cs to the Entities
   This interface uses IQueryable<T> to allow a caller to obtain a sequence of Product objects. The IQueryable<T> interface is derived from the more familiar IEnumerable<T> interface 
   and represents a collection of objects that can be queried, such as those managed by a database.
   the IQueryable<T> interface allows me to ask the database for just the objects that I require using standard LINQ statements and without needing to know what database server stores the data or 
   how it processes the query. Without the IQueryable<T> interface, I would have to retrieve all of the Product objects from the database and then discard the ones I don’t want, 
   which becomes an expensive operation as the amount of data used by an application increases. It is for this reason that the IQueryable<T> interface is typically used instead of IEnumerable<T> 
   in database repository interfaces and classes.

6- Registering the Repository Service : MVC emphasizes the use of loosely coupled components, which means you can make a change in one part of the application without having to make corresponding 
   changes elsewhere. This approach categorizes parts of the application as services, which provide features that other parts of the application use. The class that provides a service can then be 
   altered or replaced without requiring changes in the classes that useit. I want to create a repository service, which allows controllers to get objects that implement the I{Entity}Repository 
   interface without knowing which class is being used. Services are registered in the ConfigureServices method of the Startup class
   public void ConfigureServices(IServiceCollection services) {
     services.AddTransient<IProductRepository, EFProductRepository>();
	 The statement I added to the ConfigureServices method tells ASP.NET Core that when a component, such as a controller, needs an implementation of the IProductRepository interface, it should receive 
	 an instance of the EFProductRepository class. The AddTransient method specifies that a new EFProductRepository object should be created each time the IProductRepository interface is needed.

7- Adding a Controller  To create the first controller in the application, I added a class file called ProductController.cs to the Controllers folder
	private IProductRepository repository;
	public ProductController(IProductRepository repo) {
	repository = repo; }
When MVC needs to create a new instance of the ProductController class to handle an HTTP request, it will inspect the constructor and see that it requires an object that implements the IProductRepository interface.
TO determine what implementation class should be used, MVC consults the configuration in the Startup class, which tells it that EFProductRepository should be used and that a new instance should be
created every time. MVC creates a new EFProductRepository object and uses it to invoke the ProductController constructor in order to create the controller object that will process the HTTP request.

This is known as dependency injection, and its approach allows the ProductController constructor to access the application’s repository through the IProductRepository interface without having any need to
know which implementation class has been configured.

8- Adding and Configuring the View : It is needed to create a view to present the content to the user, but there are some preparatory steps required that will make writing the view simpler. The first is
to create a shared layout that will define common content that will be included in all HTML responses sent to clients. Shared layouts are a useful way of ensuring that views are consistent and contain 
important JavaScript files and CSS stylesheets . So Views/Shared folder and added to it a new MVC View Layout Page called _Layout.cshtml, which is the default name that Visual Studio assigns to this item type.

9- Next is to configure the application so that the _Layout.cshtml file is applied by default. This is done by adding an MVC View Start Page file called _ViewStart.cshtml to the Views folder. The default
content added by Visual Studio
@{    ViewData["Title"] = "List";
    Layout = "~/Views/Shared/_Layout.cshtml"; }
	@model IEnumerable<Product>
@foreach (var p in Model) {
<div>
<h3>@p.Name</h3>
@p.Description
<h4>@p.Price.ToString("c")</h4>
</div>
}

The @model expression at the top of the file specifies that the view will receive a sequence of Product objects from the action method as its model data. I use a @foreach expression to work through 
the sequence and generate a simple set of HTML elements for each Product object that is received.
The view doesn’t know where the Product objects came from, how they were obtained, or whether they represent all of the products known to the application. Instead, the view deals only with 
how details of each Product is displayed using HTML elements, which is consistent with the separation of concerns

10- Setting the Default Route : Must tell MVC that it should send requests that arrive for the root URL of my application (http://mysite/) to the List action method in the ProductController class. 
It must be done by editing the statement in the Startup class that sets up the MVC classes that handle HTTP requests
app.UseMvc(routes => {
routes.MapRoute( name: "default", template: "{controller=Product}/{action=List}/{id?}");
});

For .Net Core 3.0 version, MVC route option endpoint must be set to false in ConfigurationService with the code below
            services.AddMvc(option=> option.EnableEndpointRouting =false);

The Configure method of the Startup class is used to set up the request pipeline, which consists of classes (known as middleware) that will inspect HTTP requests and generate responses. The UseMvc method
sets up the MVC middleware, and one of the configuration options is the scheme that will be used to map URLs to controllers and action methods. 

11- Preparing a Database: To use SQL Server as the database,  will access the database using the Entity Framework Core (EF Core), which is the Microsoft .NET object-relational mapping (ORM) framework. 
An ORM framework presents the tables, columns, and rows of a relational database through regular C# objects.

*Installing the Entity Framework Core Tools Package
*Creating the Database Classes : 
The database context class is the bridge between the application and Entity Framework Core and provides access to the application’s data using model objects. To create the database context class 
for the current application, a class file called ApplicationDbContext.cs is added to the Entity folder
*Creating the Repository Class: The next step is to create a class that implements the IProductRepository interface and gets its data using Entity Framework Core. and file called EFProductRepository.cs to the Models folder and used it to
define the repository class in Entity Folder.
public class EFProductRepository : IProductRepository {
private ApplicationDbContext context;
public EFProductRepository(ApplicationDbContext ctx) 
{ context = ctx; }
public IQueryable<Product> Products => context.Products;

*Defining the Connection String : A connection string specifies the location and name of the database and provides configuration settings for how the application should connect to the database server. Connection strings are 
stored in a JSON file called appsettings.json. Connection strings must be expressed as a single unbroken line, which is fine in the Visual Studio editor but doesn’t fit on the printed page and explains the awkward formatting in Listing
{"Data": {"SportStoreProducts": {"ConnectionString": "Server=DESKTOP-ND76BSG\\SQLEXPRESS;Database=SportStore;Trusted_Connection=True;MultipleActiveResultSets=true"}}
Within the Data section of the configuration file,  the name of the connectionstring is set to SportsStoreProducts.

12- Configuring the Application: The next steps are to read the connection string and to configure the application to use it to connect to the database. the changes required to the Startup class required 
to receive details of the configuration data contained in the appsettings.json file and use it to configure Entity Framework Core. (The job of reading the JSON file is handled by the Program class)
public class Startup {
public Startup(IConfiguration configuration) => Configuration = configuration;
public IConfiguration Configuration { get; }
public void ConfigureServices(IServiceCollection services) { services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer( Configuration["Data:SportStoreProducts:ConnectionString"]));
services.AddTransient<IProductRepository, EFProductRepository>();
services.AddMvc(); }

The constructor that is added to the Startup class receives the configuration data loaded from the appsettings.json file, which is presented through an object that implements the IConfiguration interface.
The constructor assigns the IConfiguration object to a property called Configuration so that it can be used by the rest of the Startup class.
How to read and access configuration data for the SportsStore application, a sequence of method calls that set up Entity Framework Core within the ConfigureServices is added 
method.
services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(Configuration["Data:SportStoreProducts:ConnectionString"]));

many of the methods that are used in the Startup class allow services and middleware features to be configured using options arguments. The argument to the AddDbContext method is a lambda expression that receives an options 
object that configures the database for the context class. In this case, the database is configured with the UseSqlServer method and specified the connection string, which is obtained from the Configuration property.
The next change is made in the Startup class was to replace the EFProductRepository like this: 
services.AddTransient<IProductRepository, EFProductRepository>();
The components in the application that use the IProductRepository interface, which is just the Product controller at the moment, will receive an EFProductRepository object when they are created, which will
provide them with access to the data in the database. 

13- Disabling Scope Verification: Using Entity Framework Core requires a configuration change to the dependency injection feature,The Program class is responsible for starting and configuring ASP.NET Core before
handing control to the Startup class shows the change required. Without this change, an exception will be thrown when you try to create the database schema in the next section.
public class Program {
public static void Main(string[] args) { BuildWebHost(args).Run(); }
public static IWebHost BuildWebHost(string[] args) => WebHost.CreateDefaultBuilder(args).UseStartup<Startup>().UseDefaultServiceProvider(options => options.ValidateScopes = false).Build(); } }

14- Creating the Database Migration: Entity Framework Core is able to generate the schema for the database using the model classes through a feature called migrations. When you prepare a migration, EF Core creates a 
C# class that contains the SQL commands required to prepare the database. If need to modify model classes, then a new migration can be created that contains the SQL commands required to reflect the changes. 
In this way, doesn’t have to worry about manually writing and testing SQL commands and can just focus on the C# model classes in the application. Entity Framework Core commands are performed from the command line. 

Open a new command prompt or PowerShell window, navigate to the SportsStore project folder (the one that contains the Startup.cs and appsettings.json files), and run the following command to create the migration class that will
prepare the database for its first use:
dotnet ef migrations add Initial

Or Remove the individual migration files in your project's Migrations folder. Then Enable-Migrations in Package Manager Console. After Add-migration Initial in PMC. Comment out the code inside of the Up method in the 
Initial Migration. and the Update-Database command to apply it to a database so new DB will be created on the SQL Server.

15- Creating the Seed Data: To populate the database and provide some sample data, a class file called SeedData.cs is added to the Entity folder and and defined the class.
public static void EnsurePopulated(IApplicationBuilder app)
        { ApplicationDbContext context = app.ApplicationServices.GetRequiredService<ApplicationDbContext>();
            context.Database.Migrate();
            if (!context.Products.Any())
            { context.Products.AddRange(new Product{Name = "Kayak",Description = "A boat for one person",Category = "Watersports",Price = 275},new Product{Name = "Lifejacket",****});}
            context.SaveChanges();}

The static EnsurePopulated method receives an IApplicationBuilder argument, which is the interface used in the Configure method of the Startup class to register middleware components to handle HTTP
requests, and this is where I will ensure that the database has content. 
The EnsurePopulated method obtains an ApplicationDbContext object through the IApplicationBuilder interface and calls the Database.Migrate method to ensure that the migration has been applied, which means that the database 
will be created and prepared so that it can store Product objects.

Next, the number of Product objects in the database is checked. If there are no objects in the database, then the database is populated using a collection of Product objects using the AddRange method
and then written to the database using the SaveChanges method.
The final change is to seed the database when the application starts, which is done by adding a call to the EnsurePopulated method from the Startup.cs class
template: "{controller=Product}/{action=List}/{id?}");});
SeedData.EnsurePopulated(app);

When the browser requests the default URL for the application, the application !configuration tells MVC that it needs to create a Product controller to handle the request. Creating a new Product controller
means invoking the ProductController constructor, which requires an object that implements the IProductRepository interface, and the new configuration tells MVC that an EFProductRepository object
should be created and used for this. The EFProductRepository object taps into the Entity Framework Core functionality that loads data from SQL Server and converts it into Product objects. All of this is hidden
from the ProductController class, which just receives an object that implements the IProductRepository interface and works with the data it provides. The result is that the browser window shows the sample data in
the database

16- Adding Pagination: the view displays a smaller number of products on a page and the user can move from page to page to view the overall catalog. To do this add a parameter to the List method in the Product controller

public int PageSize = 4;
public ViewResult List(int productPage = 1) => View(repository.Products.OrderBy(p => p.ProductID).Skip((productPage - 1) * PageSize).Take(PageSize));

The PageSize field specifies that Stakeholders want four products per page. I have added an optional parameter to the List method, which means that if I call the method without a parameter (List()), my call is treated as
though I had supplied the value specified in the parameter definition (List(1)). The effect is that the action method displays the first page of products when MVC invokes it without an argument. Within the body of
the action method, I get the Product objects, order them by the primary key, skip over the products that occur before the start of the current page, and take the number of products specified by the PageSize field.

17- Displaying Page Links: want to view nother page, you can append query string parameters to the end of the URL, like this:
http://localhost:5000/?productPage=2

need to render some page links at the bottom of each list of products so that customers can navigate between pages. To do this, to create a tag helper, which generates the HTML markup for the links was required.
*Adding the View Model:
To support the tag helper, it will pass information to the view about the number of pages available, the current page, and the total number of products in the repository. The easiest way to do this is 
to create a view model class, which is used specifically to pass data between a controller and a view.
must create a Models/ ViewModels folder in the StoreWeb project and added to it a class file called PagingInfo.cs
public class PagingInfo {
public int TotalItems { get; set; }
public int ItemsPerPage { get; set; }
public int CurrentPage { get; set; }
public int TotalPages =>
(int)Math.Ceiling((decimal)TotalItems / ItemsPerPage); }

* Adding the Tag Helper Class : 
A tag helper class can be created. To creat  the Infrastructure folder in the SportWeb project and added to it a class file called PageLinkTagHelper.cs